<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF List and Preview</title>
    <style>
        /* Scoped styles to avoid conflicts */
        .pdf-list-container {
            font-family: Arial, sans-serif;
            background-color: #f4f7fa;
            margin: 0;
            padding: 20px;
        }

        .pdf-list-wrapper {
            max-width: 900px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .pdf-list-header {
            text-align: center;
            color: #333;
        }

        .pdf-search-input {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

        .pdf-table-container {
            height: 300px; /* Fixed height for the table */
            overflow-y: auto;
            margin-bottom: 20px;
        }

        .pdf-list-table {
            width: 100%;
            border-collapse: collapse;
            text-align: left;
        }

        .pdf-list-table th, .pdf-list-table td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        .pdf-list-table th {
            background-color: #3498db;
            color: white;
        }

        .pdf-list-table td {
            background-color: #fafafa;
        }

        .pdf-list-table td button {
            padding: 5px 10px;
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .pdf-list-table td button:hover {
            background-color: #c0392b;
        }

        .pdf-iframe-container {
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 4px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>

    <div class="pdf-list-container">
        <div class="pdf-list-wrapper">
            <h1 class="pdf-list-header">PDF List</h1>
            
            <!-- Search Input -->
            <input type="text" id="searchInput" class="pdf-search-input" placeholder="Search PDF by name..." onkeyup="filterTable()">
            
            <!-- Table with fixed height and scrollable body -->
            <div class="pdf-table-container">
                <table id="pdfTable" class="pdf-list-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="pdfTableBody">
                        <!-- Table rows will be inserted here via JavaScript -->
                    </tbody>
                </table>
                <p id="err" style="color: #e74c3c;"></p>
            </div>
            
            <!-- PDF Preview iframe -->
            <div class="pdf-iframe-container">
                <iframe id="pdfPreview" width="100%" height="800px" style="border: none;"></iframe>
            </div>
        </div>
    </div>

<script>
    // Fetch PDF data from backend API
    async function fetchPdfData() {
        try {
            const response = await fetch('/api/pdfs');
            const pdfFiles = await response.json();
            populateTable(pdfFiles);
        } catch (error) {
            console.error('Error fetching PDF data:', error);
        }
    }

    // Function to populate the table with data
    function populateTable(pdfFiles) {
    const tableBody = document.getElementById('pdfTableBody');
    const err = document.getElementById('err');
    tableBody.innerHTML = ''; // Clear any existing rows
    err.innerText = ''; // Clear error message

    if (pdfFiles.length === 0) {
        err.innerText = 'No pdf found.';
    }

    pdfFiles.forEach((pdf) => {
        const row = document.createElement('tr');
        
        const nameCell = document.createElement('td');
        nameCell.textContent = pdf.name;
        row.appendChild(nameCell);
        
        const actionCell = document.createElement('td');
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.onclick = () => deletePdf(pdf.name);
        actionCell.appendChild(deleteButton);
        row.appendChild(actionCell);

        row.onclick = () => previewPdf(pdf.url); // Preview PDF on row click
        tableBody.appendChild(row);
    });
}


    // Function to filter table rows based on search input
    function filterTable() {
    const searchValue = document.getElementById('searchInput').value.toLowerCase();
    const rows = document.getElementById('pdfTableBody').getElementsByTagName('tr');
    const err = document.getElementById('err');
    let found = false; // Track if any results match the search
    
    Array.from(rows).forEach(row => {
        const pdfName = row.cells[0].textContent.toLowerCase();
        if (pdfName.includes(searchValue)) {
            row.style.display = '';
            found = true; // Match found
        } else {
            row.style.display = 'none';
        }
    });
    
    // Show the "No pdf found" message if no match is found
    if (!found) {
        err.innerText = 'No pdf found.';
    } else {
        err.innerText = ''; // Clear the error message if matches are found
    }
    }


    // Function to preview the PDF in the iframe
    function previewPdf(url) {
        const iframe = document.getElementById('pdfPreview');
        iframe.src = url;
    }

    // Function to delete a PDF from the list (and backend)
    async function deletePdf(pdfName) {
        const confirmation = confirm(`Are you sure you want to delete ${pdfName}?`);
        if (confirmation) {
            try {
                const response = await fetch(`/api/pdfs/${pdfName}`, { method: 'DELETE' });
                if (response.ok) {
                    alert('PDF deleted successfully!');
                    fetchPdfData(); // Re-fetch data after deletion
                } else {
                    alert('Error deleting PDF.');
                }
            } catch (error) {
                console.error('Error deleting PDF:', error);
            }
        }
    }

    // Initial population of the table
    fetchPdfData();
</script>

</body>
</html>
